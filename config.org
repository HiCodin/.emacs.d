#+TITLE: Emacs Config
#+AUTHOR: HICODIN

* Separate file for Customize settings

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

* Window Numbering

#+BEGIN_SRC emacs-lisp
(use-package window-numbering
   :ensure t
   :init 
   (window-numbering-mode 1))
#+END_SRC

* Theme 
** Odersky Theme

#+BEGIN_SRC emacs-lisp
(use-package sublime-themes
   :ensure t
   :init 
   (load-theme 'odersky t)
   (set-face-attribute 'fringe nil :background (face-background 'default) :foreground (face-foreground 'default)))
#+END_SRC

* Evil

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init 
  (evil-mode 1)
  :config 
  ;; Make movement keys work like they should
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  ; Make horizontal movement cross lines                                    
  (setq-default evil-cross-lines t)
  (evil-set-initial-state 'paradox-menu-mode 'emacs))
#+END_SRC

* Spaceline
My own configurations for spaceline.

#+BEGIN_SRC emacs-lisp
(use-package spaceline
   :ensure t
   :init
   (require 'spaceline-config)
   (setq powerline-default-separator 'alternate)
   (setq spaceline-window-numbers-unicode t)
   (setq spaceline-workspace-numbers-unicode t)

   (spaceline-define-segment helm-buffer-id
   "Helm session identifier."
      (propertize
       (let ((custom (cdr (assoc (buffer-name) spaceline--helm-buffer-ids)))
         (case-fold-search t)
         (name (replace-regexp-in-string "-" " " (buffer-name))))
     (if custom custom
       (string-match "\\*helm:? \\(mode \\)?\\([^\\*]+\\)\\*" name)
       (concat "HELM " (capitalize (match-string 2 name))))))
   :face highlight-face
   :when (bound-and-true-p helm-alive-p))

   (spaceline-define-segment helm-help
   "Helm keybindings help."
      (-interleave
       (mapcar (lambda (s)
             (propertize (substitute-command-keys s) ))
              '("\\<helm-map>\\[helm-help]"
             "\\<helm-map>\\[helm-select-action]"
             "\\<helm-map>\\[helm-maybe-exit-minibuffer]/F1/F2..."))
       '("(help)" "(actions)" "(action)"))
  :when (bound-and-true-p helm-alive-p))

   (spaceline-define-segment version-control
    "Version control information."
    (powerline-raw
    (s-trim (concat vc-mode
          (when (buffer-file-name)
             (pcase (vc-state (buffer-file-name))
                          (`up-to-date " ")
                          (`edited " !")
                          (`added " ")
                          (`unregistered " ")
                          (`removed " ")
                          (`needs-merge " ")
                          (`needs-update " ")
                          (`ignored " ")
                          (_ ""))))))
        :when vc-mode)

   :config
   (spaceline-helm-mode)
   (spaceline-spacemacs-theme)

   (spaceline-install
     '(((window-number)
     :face highlight-face)
     anzu
     auto-compile
     buffer-id
     (((minor-modes :separator " ")
     process)
     :when active)
     ((flycheck-error flycheck-warning flycheck-info)
     :when active)
     (version-control :when active)
     (org-pomodoro :when active)
     (org-clock :when active))
 
     '(major-mode
     line-column
     (global :when active)
     hud))
   (setq spaceline-highlight-face-func 'spaceline-highlight-face-modified))

(defadvice vc-mode-line (after strip-backend () activate)
    (when (stringp vc-mode)
      (let ((gitlogo (replace-regexp-in-string "^ Git." "  " vc-mode)))
        (setq vc-mode gitlogo))))

#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t
    :init
    (bind-key "C-x g" 'magit-status))
#+END_SRC
* Helm

#+BEGIN_SRC emacs-lisp
(use-package async
   :ensure t)

(use-package helm
   :ensure t
   :diminish helm-mode
   :init 
   (progn
      (require 'helm-config)
      
      (setq helm-display-header-line nil) ;; t by default
      
      (setq helm-buffers-fuzzy-matching           t
            helm-recentf-fuzzy-match              t
            helm-M-x-fuzzy-match                  t)

      (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
            helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
            helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
            helm-ff-file-name-history-use-recentf t
            helm-ff-newfile-prompt-p              nil)
      
      (helm-mode))
   :config
   (add-hook 'helm-update-hook (lambda () (setq cursor-in-non-selected-windows nil)))
   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ;; rebind tab to run persistent action
   (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
   (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
   
   (helm-autoresize-mode 1)
   (setq helm-autoresize-max-height 30)
   (setq helm-autoresize-min-height 30)
   :bind (("C-c h" . helm-command-prefix)
          ("C-x b" . helm-mini)
          ("C-x r b" . helm-bookmarks)
          ("C-x C-f" . helm-find-files)
          ("C-c h o" . helm-occur)
          ("M-x" . helm-M-x)
          ("M-y" . helm-show-kill-ring)))
#+END_SRC

* Diminish

#+BEGIN_SRC emacs-lisp
(use-package diminish
   :ensure t
   :init 
   (diminish 'undo-tree-mode )
   (diminish 'isearch-mode )
   (diminish 'auto-revert-mode)
   (diminish 'visual-line-mode )
   (add-hook 'emacs-lisp-mode-hook 
   (lambda()
      (setq mode-name "el"))) )
#+END_SRC

* Org-Mode

#+BEGIN_SRC emacs-lisp
(use-package org
   :ensure t
   :init 
   (bind-key "C-c l" 'org-store-link)
   (bind-key "C-c a" 'org-agenda)
   (progn
   (setq org-log-done t)))
#+END_SRC

* Language specific
** Web Mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
   :ensure t)
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
   :ensure t
   :init 
   (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
   :ensure t)
#+END_SRC

* General Config
** Enable UTF-8

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)
#+END_SRC

** Quit minibuffer with ESC

#+BEGIN_SRC emacs-lisp
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))

(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

** Cursor related 

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)

;; a function for inserting new line above the cursor position
;; shamelessly copied from Howard Abrams
(defun my/insert-line-before (times)
  "Insert a newline(s) above the line containing the cursor"
  (interactive "p")
  (save-excursion
    (move-beginning-of-line 1)
    (newline times)))

(global-set-key (kbd "C-S-o") 'my/insert-line-before)
#+END_SRC

** Misc
*** Terminal Related
#+BEGIN_SRC emacs-lisp
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
	ad-do-it
	(kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel)

(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)


(add-hook 'eshell-mode-hook (lambda ()
                                    (setq-local global-hl-line-mode
                                                nil)))
(add-hook 'term-mode-hook (lambda ()
                            (setq-local global-hl-line-mode
                                        nil)))
#+END_SRC
*** Extra settings
**** font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "MonacoB-11")
#+END_SRC
**** iBuffer
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC
**** Highlight paren and auto insert closing paren
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(electric-pair-mode 1)
#+END_SRC
**** Disable beep
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
**** Highlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
(set-face-background 'hl-line "grey20")
(set-face-attribute hl-line-face nil :underline nil)
#+END_SRC
**** Answer with 'y' or 'n' instead of full word
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
**** Newline and indent
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC

**** Visual Line Mode
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC
**** Backup and no autosave
#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.emacs.d/backups"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t) 
(setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC
